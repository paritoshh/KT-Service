# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: kt
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
    # authorizers:
    #   KtJwtAuthorizer:
    #     identitySource: $request.header.Authorization
    #     issuerUrl: https://cognito-idp.ap-south-1.amazonaws.com/ap-south-1_ynxeOVgQ7
    #     audience:
    #       - 7p7dijjcr1r8jeel85qvmd3t6d
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

# you can overwrite defaults here
  stage: dev
  region: ap-south-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem

      Resource: "*"

#    Define function environment variables here
  environment:
    PROFILE_TABLE: ${self:service}-${self:provider.stage}
    # PROFILE_EMAIL_TABLE: "profile-email-${opt:stage, self:provider.stage}"
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.ap-south-1.amazonaws.com/ap-south-1_G4GJ5YWee
        audience:
          - 4s31g6lhih98eqk23ltcggo2eb
functions:
  profileUpdate:
    handler: api/profile.submit
    memorySize: 128
    description: Submit profile information and starts kt process.
    events:
      - httpApi: 
          path: /profiles/{email}
          method: PUT
          authorizer: serviceAuthorizer
  profileUpdateRegisterSessions:
    handler: api/profile.registerUnregisterSession
    memorySize: 128
    description: Register or unregister for a session.
    events:
      - httpApi: 
          path: /profiles/{email}/updateRegisterSessions
          method: PUT
          authorizer: serviceAuthorizer
  profileDetails:
    handler: api/profile.get
    events:
      - httpApi:
          path: /profiles/{email}
          method: GET
          authorizer: serviceAuthorizer
  createSession:
    handler: api/session.submit
    events:
      - httpApi:
          path: /session
          method: POST
          authorizer: serviceAuthorizer
  sessionDetails:
    handler: api/session.get
    events:
      - httpApi:
          path: /session/{id}
          method: GET
          authorizer: serviceAuthorizer
  sessionUpdate:
    handler: api/session.update
    events:
      - httpApi:
          path: /session/{id}
          method: PUT
          authorizer: serviceAuthorizer
  fetchALlSessions:
    handler: api/session.fetchAll
    events:
      - httpApi:
          path: /session
          method: GET
          authorizer: serviceAuthorizer
  provideFeedback:
    handler: api/session.feedback
    events:
      - httpApi:
          path: /session/{id}/feedback
          method: PUT
          authorizer: serviceAuthorizer
  provideRecordingLink:
    handler: api/session.recording
    events:
      - httpApi:
          path: /session/{id}/recording
          method: PUT
          authorizer: serviceAuthorizer
  createTickets:
      handler: api/tickets.submit
      events:
        - httpApi:
            path: /ticket
            method: POST
  createAuthUrl:
      handler: api/google.consentUrl
      events:
        - httpApi:
            path: /google
            method: GET
  fetchCode:
      handler: api/google.code
      events:
        - httpApi:
            path: /google/code
            method: GET
  createEvent:
      handler: api/google.createEvent
      events:
        - httpApi:
            path: /google/createEvent
            method: POST
  deleteEvent:
      handler: api/google.deleteEvent
      events:
        - httpApi:
            path: /google/deleteEvent
            method: POST

resources:
  Resources:
    ProfilesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "email"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "email"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.PROFILE_TABLE}
    SessionDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: "kt-sessions"